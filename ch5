result = 0

def add(num):
    global result
    result += num
    return result

print(add(3))
print(add(4))


result1 = 0
result2 = 0

def add1(num):
    global result1
    result1 += num
    return result1

def add2(num):
    global result2
    result2 += num
    return result2

print(add1(3))
print(add1(4))
print(add2(3))
print(add2(7))
##################################
class Calculator:
    def __init__(self):
        self.result = 0

    def add(self, num):
        self.result += num
        return self.result

cal1 = Calculator()
cal2 = Calculator()

print(cal1.add(3))
print(cal1.add(4))
print(cal2.add(3))
print(cal2.add(7))
#붕어빵?
def sub(self, num):
    self.result -= num
    return self.result
#################################################
class Cookie:
    pass
#################################################
class FourCal:
    pass

class FourCal:
    def setdata(self, first, second):
        self.first = first
        self.second = second

a = FourCal()

a.setdata(4, 2)

print(a.first)

print(a.second)

b = FourCal()

b.setdata(3, 7)

print(b.first)

print(a.first)

id(a.first)

id(b.first)

class FourCal:
    def setdata(self, first, second):
        self.first = first
        self.second = second
    def add(self):
        result = self.first + self.second
        return result

print(a.add())

class FourCal:
    def __init__(self, first, second):
        self.first = first
        self.second = second
    def setdata(self, first, second):
        self.first = first
        self.second = second
    def setdata(self, first, second):
        self.first = first
        self.second = second
    def add(self):
        result = self.first + self.second
        return result
    def mul(self):
        result = self.first * self.second
        return result
    def sub(self):
        result = self.first - self.second
        return result
    def div(self):
        result = self.first / self. second
        return result
####################################################
class MoreFourCal(FourCal):
    def pow(self):
        result = self.first ** self.second
        return result

###############################################################################
# 05-1 클래스
###############################################################################


result = 0

def add(num):
    global result
    result += num
    return result

print(add(3))
print(add(4))






result1 = 0
result2 = 0

def add1(num):
    global result1
    result1 += num
    return result1

def add2(num):
    global result2
    result2 += num
    return result2

print(add1(3))
print(add1(4))
print(add2(3))
print(add2(7))






class Calculator:
    def __init__(self):
        self.result = 0

    def add(self, num):
        self.result += num
        return self.result

cal1 = Calculator()
cal2 = Calculator()

print(cal1.add(3))
print(cal1.add(4))
print(cal2.add(3))
print(cal2.add(7))





class Calculator:
    def __init__(self):
        self.result = 0

    def add(self, num):
        self.result += num
        return self.result

    def sub(self, num):
        self.result -= num
        return self.result








class FourCal:
    def setdata(self, first, second):
        self.first = first
        self.second = second



a = FourCal()
a.setdata(4, 2)


print(a.first)

print(a.second)


a = FourCal()
b = FourCal()

a.setdata(4, 2)
print(a.first)



b.setdata(3, 7)
print(b.first)


print(a.first)


a = FourCal()
b = FourCal()
a.setdata(4, 2)
b.setdata(3, 7)
id(a.first)   # a의 first 주소값을 확인
id(b.first)   # b의 first 주소값을 확인



class FourCal:
    def setdata(self, first, second):
        self.first = first
        self.second = second


a = FourCal()
a.setdata(4, 2)
print(a.add())



class FourCal:
    def setdata(self, first, second):
        self.first = first
        self.second = second
    def add(self):
        result = self.first + self.second
        return result



a = FourCal()
a.setdata(4, 2)


print(a.add())


class FourCal:
    def setdata(self, first, second):
        self.first = first
        self.second = second
    def add(self):
        result = self.first + self.second
        return result
    def mul(self):
        result = self.first * self.second
        return result
    def sub(self):
        result = self.first - self.second
        return result
    def div(self):
        result = self.first / self.second
        return result


a = FourCal()
b = FourCal()
a.setdata(4, 2)
b.setdata(3, 8)
a.add()
a.mul()
a.sub()
a.div()
b.add()
b.mul()
b.sub()
b.div()



a = FourCal()
a.add()   # error





class FourCal:
    def __init__(self, first, second):
        self.first = first
        self.second = second
    def setdata(self, first, second):
        self.first = first
        self.second = second
    def add(self):
        result = self.first + self.second
        return result
    def mul(self):
        result = self.first * self.second
        return result
    def sub(self):
        result = self.first - self.second
        return result
    def div(self):
        result = self.first / self.second
        return result



a = FourCal()   ## error

a = FourCal(4, 2)

print(a.first)
print(a.second)

a.add()
a.div()


class MoreFourCal(FourCal):
    pass

a = MoreFourCal(4, 2)
a.add()
a.mul()
a.sub()
a.div()



class MoreFourCal(FourCal):
    def pow(self):
        result = self.first ** self.second
        return result


a = MoreFourCal(4, 2)
a.pow()




a = FourCal(4, 0)
a.div()   ## error




class SafeFourCal(FourCal):
    def div(self):
        if self.second == 0:
            return 0
        else:
            return self.first / self.second




a = SafeFourCal(4, 0)
a.div()




class Family:
    lastname = "김"

print(Family.lastname)


a = Family()
b = Family()
print(a.lastname)
print(b.lastname)


Family.lastname = "박"

print(a.lastname)
print(b.lastname)

id(Family.lastname)
id(a.lastname)
id(b.lastname)


# 1. 화소수pixels, 줌배율zoom)을 속성으로 가자고 사진을 찍는 동작을 수향하는 Camera 클래스를 작성하세요

class
    def


    def
        print("사진을 찍는다.")

canon = Camera(2000, 3.5)
canon.takepicture()






# 2. 다음은 Calculator 클래스,,,

class Calculator:
    def __init__(self):
        self.value = 0

    def add(self, val):
        self.value += val

# 위 클래스를 상속하는 UpgradeCalculator를 만들고 값을 뺄 수 있는 minus 메서드를 추가해 보세요.
# 즉 다음과 같이 동작하는 클래스를 만들어야 합니다.

cal = UpgradeCalculator()
cal.add(10)
cal.minus(7)

print(cal.value) # 10에서 7을 뺀 3을 출력




###############################################################################
# 05-2 모듈
###############################################################################

def add(a, b):
    return a + b

def sub(a, b):
    return a-b



from mod1 import add
add(3, 4)



# mod1.py
def add(a, b):
    return a+b

def sub(a, b):
    return a-b

print(add(1, 4))
print(sub(4, 2))




>>> import mod1
5
2




# mod1.py
def add(a, b):
    return a+b

def sub(a, b):
    return a-b

if __name__ == "__main__":
    print(add(1, 4))
    print(sub(4, 2))









# mod2.py
PI = 3.141592

class Math:
    def solv(self, r):
        return PI * (r ** 2)

def add(a, b):
    return a+b




import mod2
print(mod2.PI)



a = mod2.Math()
print(a.solv(2))



print(mod2.add(mod2.PI, 4.4))






# modtest.py
import mod2
result = mod2.add(3, 4)
print(result)




import sys


sys.path.append("C:/doit/mymod")
sys.path


import mod2
print(mod2.add(3,4))


###############################################################################
# 05-3 패키지
###############################################################################


# echo.py
def echo_test():
    print ("echo")



# render.py
def render_test():
    print ("render")



import game.sound.echo
game.sound.echo.echo_test()


from game.sound import echo
echo.echo_test()


from game.sound.echo import echo_test
echo_test()




import game
game.sound.echo.echo_test()  ## error


import game.sound.echo.echo_test   ## error


from game.sound import *    ## error
echo.echo_test()






# render.py
from game.sound.echo import echo_test
def render_test():
    print ("render")
    echo_test()


from game.graphic.render import render_test
render_test()



# render.py
from ..sound.echo import echo_test

def render_test():
    print ("render")
    echo_test()






###############################################################################
# 05-4 예외처리
###############################################################################


f = open("나없는파일", 'r')

4 / 0


a = [1,2,3]
a[4]



try:
    4 / 0
except ZeroDivisionError as e:
    print(e)



f = open('foo.txt', 'w')
try:
    # 무언가를 수행한다.
finally:
    f.close()

    try:
        a = [1, 2]
        print(a[3])
        4 / 0
    except ZeroDivisionError:
        print("0으로 나눌 수 없습니다.")
    except IndexError:
        print("인덱싱 할 수 없습니다.")






try:
    a = [1,2]
    print(a[3])
    4/0
except ZeroDivisionError as e:
    print(e)
except IndexError as e:
    print(e)

try:
    a = [1, 2]
    print(a[3])
    4 / 0
except (ZeroDivisionError, IndexError) as e:
    print(e)







try:
    f = open("나없는파일", 'r')
except FileNotFoundError:
    pass




class Bird:
    def fly(self):
        raise NotImplementedError







class Eagle(Bird):
    pass

eagle = Eagle()
eagle.fly()









class Eagle(Bird):
    def fly(self):
        print("very fast")

eagle = Eagle()
eagle.fly()




class MyError(Exception):
    pass



def say_nick(nick):
    if nick == '바보':
        raise MyError()
    print(nick)





try:
    say_nick("천사")
    say_nick("바보")
except MyError:
    print("허용되지 않는 별명입니다.")



###############################################################################
# 05-5 내장 함수
###############################################################################


abs(3)

abs(-3)

abs(-1.2)




all([1, 2, 3])

all([1, 2, 3, 0])




any([1, 2, 3, 0])


any([0, ""])


chr(97)


chr(48)


dir([1, 2, 3])

dir({'1':'a'})


divmod(7, 3)

7 // 3

7 % 3


for i, name in enumerate(['body', 'foo', 'bar']):
    print(i, name)



eval('1+2')

eval("'hi' + 'a'")

eval('divmod(4, 3)')




#positive.py
def positive(l):
    result = []
    for i in l:
        if i > 0:
            result.append(i)
    return result

print(positive([1,-3,2,0,-5,6]))





#filter1.py
def positive(x):
    return x > 0

print(list(filter(positive, [1, -3, 2, 0, -5, 6])))


list(filter(lambda x: x > 0, [1, -3, 2, 0, -5, 6]))




hex(234)

hex(3)


a = 3
id(3)

id(a)

b = a
id(b)
id(4)


a = input()

a



b = input("Enter: ")

b



int('3')


int(3.4)

int('11', 2)

int('1A', 16)



class Person: pass

a = Person()
isinstance(a, Person)

b = 3
isinstance(b, Person)




len("python")
len([1,2,3])
len((1, 'a'))


list("python")

list((1,2,3))

a = [1, 2, 3]
b = list(a)
b




# two_times.py
def two_times(numberList):
    result = [ ]
    for number in numberList:
        result.append(number*2)
    return result

result = two_times([1, 2, 3, 4])
print(result)



def two_times(x):
    return x*2

list(map(two_times, [1, 2, 3, 4]))


list(map(lambda a: a*2, [1, 2, 3, 4]))




max([1, 2, 3])

max("python")




min([1, 2, 3])

min("python")



oct(34)

oct(12345)



f = open("binary_file", "rb")

fread = open("read_mode.txt", 'r')
fread2 = open("read_mode.txt")

fappend = open("append_mode.txt", 'a')




ord('a')

ord('0')


pow(2, 4)

pow(3, 3)




list(range(5))

list(range(5, 10))


list(range(1, 10, 2))

list(range(0, -10, -1))





round(4.6)

round(4.2)

round(5.678, 2)




sorted([3, 1, 2])

sorted(['a', 'c', 'b'])

sorted("zero")

sorted((3, 2, 1))



str(3)

str('hi')

str('hi'.upper())




sum([1,2,3])

sum((4,5,6))


tuple("abc")

tuple([1, 2, 3])

tuple((1, 2, 3))





type("abc")

type([ ])

type(open("test", 'w'))



list(zip([1, 2, 3], [4, 5, 6]))

list(zip([1, 2, 3], [4, 5, 6], [7, 8, 9]))

list(zip("abc", "def"))


###############################################################################
# 05-6 외장 함수
###############################################################################


C:/User/home>python test.py abc pey guido


# argv_test.py
import sys
print(sys.argv)



python argv_test.py you need python


sys.exit()


import sys
sys.path



# path_append.py
import sys
sys.path.append("C:/doit/mymod")



import pickle
f = open("test.txt", 'wb')
data = {1: 'python', 2: 'you need'}
pickle.dump(data, f)
f.close()




import pickle
f = open("test.txt", 'rb')
data = pickle.load(f)
print(data)



import os
os.environ


os.environ['PATH']



os.chdir("C:\WINDOWS")




os.getcwd()


os.system("dir")


f = os.popen("dir")

print(f.read())




import shutil
shutil.copy("src.txt", "dst.txt")



import glob
glob.glob("c:/doit/mark*")



import tempfile
filename = tempfile.mktemp()
filename



import tempfile
f = tempfile.TemporaryFile()
f.close()


import time
time.time()


time.localtime(time.time())


time.asctime(time.localtime(time.time()))



time.ctime()


time.strftime('출력할 형식 포맷 코드', time.localtime(time.time())) # 코드 입격

import time
time.strftime('%x', time.localtime(time.time()))

time.strftime('%c', time.localtime(time.time()))

#sleep1.py
import time
for i in range(10):
    print(i)
    time.sleep(1)



import calendar
print(calendar.calendar(2015))

calendar.prcal(2015)


calendar.prmonth(2015, 12)

calendar.weekday(2015, 12, 31)

calendar.monthrange(2015,12)


import random
random.random()

random.randint(1, 10)


random.randint(1, 55)




# random_pop.py
import random
def random_pop(data):
    number = random.randint(0, len(data)-1)
    return data.pop(number)

if __name__ == "__main__":
    data = [1, 2, 3, 4, 5]
    while data:
        print(random_pop(data))


def random_pop(data):
    number = random.choice(data)
    data.remove(number)
    return number

import random
data = [1, 2, 3, 4, 5]
random.shuffle(data)
data



import webbrowser
webbrowser.open("http://google.com")

webbrowser.open_new("http://google.com")
